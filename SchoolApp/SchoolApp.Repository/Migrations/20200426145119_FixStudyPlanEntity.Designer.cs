// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchoolApp.Repository.Contexts;

namespace SchoolApp.Repository.Migrations
{
    [DbContext(typeof(SchoolAppDbContext))]
    [Migration("20200426145119_FixStudyPlanEntity")]
    partial class FixStudyPlanEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SchoolApp.Repository.Models.CourseDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("headerTeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("schoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("subjectId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("headerTeacherId");

                    b.HasIndex("subjectId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.CourseSecondaryTeacherDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("secondaryTeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("secondaryTeacherId");

                    b.ToTable("CourseSecondaryTeachers");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.EnrollmentDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("studentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("studyPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("studentId");

                    b.HasIndex("studyPlanId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.SchoolDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.StudentDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("firstName")
                        .HasColumnType("text");

                    b.Property<string>("identificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.Property<Guid>("schoolId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.StudentEnrolledInCourseDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("courseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("studentEnrolledId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("studentEnrolledId");

                    b.ToTable("StudentEnrolledInCourseDto");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.StudyPlanDetailDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<Guid>("studyPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("subjectId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("studyPlanId");

                    b.HasIndex("subjectId");

                    b.ToTable("StudyPlanDetails");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.StudyPlanDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<Guid>("schoolId")
                        .HasColumnType("uuid");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("StudyPlans");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.SubjectDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.TeacherDto", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("firstName")
                        .HasColumnType("text");

                    b.Property<string>("identificationNumber")
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.Property<Guid>("schoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("teacherIdentification")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.CourseDto", b =>
                {
                    b.HasOne("SchoolApp.Repository.Models.TeacherDto", "headerTeacher")
                        .WithMany()
                        .HasForeignKey("headerTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Repository.Models.SubjectDto", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.CourseSecondaryTeacherDto", b =>
                {
                    b.HasOne("SchoolApp.Repository.Models.CourseDto", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Repository.Models.TeacherDto", "secondaryTeacher")
                        .WithMany()
                        .HasForeignKey("secondaryTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.EnrollmentDto", b =>
                {
                    b.HasOne("SchoolApp.Repository.Models.StudentDto", "student")
                        .WithMany()
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Repository.Models.StudyPlanDto", "studyPlan")
                        .WithMany()
                        .HasForeignKey("studyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.StudentEnrolledInCourseDto", b =>
                {
                    b.HasOne("SchoolApp.Repository.Models.CourseDto", "course")
                        .WithMany("enrollments")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Repository.Models.EnrollmentDto", "studentEnrolled")
                        .WithMany()
                        .HasForeignKey("studentEnrolledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Repository.Models.StudyPlanDetailDto", b =>
                {
                    b.HasOne("SchoolApp.Repository.Models.StudyPlanDto", "studyPlan")
                        .WithMany("details")
                        .HasForeignKey("studyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Repository.Models.SubjectDto", "subject")
                        .WithMany()
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
